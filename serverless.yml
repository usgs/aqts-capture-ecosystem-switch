service: aqts-capture-ecosystem-switch

provider:
  name: aws
  rolePermissionsBoundary:
    Fn::Sub:
      - "arn:aws:iam::${accountId}:policy/csr-Developer-Permissions-Boundary"
      - accountId:
          Ref: "AWS::AccountId"
  vpc: ${self:custom.vpc}
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'TEST'}
  runtime: python3.8
  memorySize: 128
  timeout: 90
  logRetentionInDays: 90
  deploymentBucket:
    name: ${opt:bucket, iow-cloud-applications}
  stackTags:
    "wma:applicationId": "Aquarius TS Capture Ecosystem Switch"
    "wma:contact": "Kenneth Kehl kkehl@contractor.usgs.gov"
    "wma:environment": ${self:provider.stage}
    "wma:taggingVersion": 0.0.1
    "wma:costCenter": TBD
    "wma:organization": IOW
    "displayName": "Eco-switch"
    "wma:role": etl
    "wma:system": NWIS
    "wma:subSystem": NWISWeb-Capture
    commitIdentifier: ${git:sha1}

custom:
  # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
  # The test database starts at 7 am central and stops at 6 pm central time, Monday through Friday.
  # The qa database stops at 6 pm central on Fridays
  # The production database never stops or starts according to a schedule, the lambdas exist only for manual use.
  environments:
    DEV: dev
    TEST: test
    QA: qa
    PROD-EXTERNAL: prod-external
  canDeleteDb:
    DEV: true
    TEST: true
    QA: true
    PROD-EXTERNAL: false
  startObservationSchedules:
    DEV: cron(59 12 ? * MON *)
    TEST: cron(59 12 ? * MON-FRI *)
    QA: cron(59 12 ? * MON *)
    PROD-EXTERNAL: cron(0 12 ? * MON *)
  stopObservationSchedules:
    DEV: cron(59 23 ? * FRI *)
    TEST: cron(59 23 ? * MON-FRI *)
    QA: cron(59 23 ? * FRI *)
    PROD-EXTERNAL: cron(0 23 ? * FRI *)
  startCaptureSchedules:
    DEV: cron(59 12 ? * MON *)
    TEST: cron(59 12 ? * MON-FRI *)
    QA: cron(59 12 ? * MON *)
    PROD-EXTERNAL: cron(0 12 ? * MON *)
  stopCaptureSchedules:
    DEV: cron(59 23 ? * FRI *)
    TEST: cron(59 23 ? * MON-FRI *)
    QA: cron(59 23 ? * FRI *)
    PROD-EXTERNAL: cron(59 23 ? * FRI *)
  # No scheduling enabled for prod.  For qa, only Friday stops are scheduled.  For test, both stop and
  # starts are scheduled.
  startCaptureDbScheduleEnabled:
    DEV: false
    TEST: true
    QA: false
    PROD-EXTERNAL: false
  startObservationDbScheduleEnabled:
    DEV: false
    TEST: true
    QA: false
    PROD-EXTERNAL: false
  stopCaptureDbScheduleEnabled:
    DEV: false
    TEST: true
    QA: false
    PROD-EXTERNAL: false
  stopObservationDbScheduleEnabled:
    DEV: true
    TEST: true
    QA: true
    PROD-EXTERNAL: false

  exportGitVariables: false
  vpc:
    securityGroupIds: ${ssm:/iow/retriever-capture/${self:provider.stage}/securityGroupIds~split}
    subnetIds: ${ssm:/iow/aws/vpc/${self:provider.stage}/subnetIds~split}
  observationsDb:
    connectInfo: ${ssm:/aws/reference/secretsmanager/WQP-EXTERNAL-${self:provider.stage}~true}
  esLogs:
    endpoint: ${ssm:/iow/aws/vpc/${self:provider.stage}/elasticsearchEndpoint}
    index: ${self:service}
    retentionInDays: 90
    filterPattern: "?ERROR ?CRITICAL"

functions:
  StartObservationsDb:
    handler: src.handler.start_observations_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
    events:
      - schedule:
          rate: ${self:custom.startObservationSchedules.${self:provider.stage}}
          enabled: ${self:custom.startObservationDbScheduleEnabled.${self:provider.stage}}

  StopObservationsDb:
    handler: src.handler.stop_observations_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      DB_HOST: ${self:custom.observationsDb.connectInfo.DATABASE_ADDRESS}
      DB_USER: ${self:custom.observationsDb.connectInfo.WQP_READ_ONLY_USERNAME}
      DB_NAME: ${self:custom.observationsDb.connectInfo.DATABASE_NAME}
      DB_PASSWORD: ${self:custom.observationsDb.connectInfo.WQP_READ_ONLY_PASSWORD}
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
    events:
      - schedule:
          rate: ${self:custom.stopObservationSchedules.${self:provider.stage}}
          enabled: ${self:custom.stopObservationDbScheduleEnabled.${self:provider.stage}}

  StartCaptureDb:
    handler: src.handler.start_capture_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
    events:
      - schedule:
          rate: ${self:custom.startCaptureSchedules.${self:provider.stage}}
          enabled: ${self:custom.startCaptureDbScheduleEnabled.${self:provider.stage}}

  StopCaptureDb:
    handler: src.handler.stop_capture_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
    events:
      - schedule:
          rate: ${self:custom.stopCaptureSchedules.${self:provider.stage}}
          enabled: ${self:custom.stopCaptureDbScheduleEnabled.${self:provider.stage}}

  troubleshoot:
    handler: src.handler.troubleshoot
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}

  ControlDbUtil:
    handler: src.handler.control_db_utilization
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}
    events:
      - cloudwatchEvent:
          event:
            source:
              - 'aws.cloudwatch'
            detail:
              alarmName: ["aqts-capture-error-handler-${self:provider.stage}-invocation-alarm"]

  disableTrigger:
    handler: src.db_resize_handler.disable_trigger
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}

  enableTrigger:
    handler: src.db_resize_handler.enable_trigger
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}

  shrinkDb:
    handler: src.db_resize_handler.shrink_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}

  growDb:
    handler: src.db_resize_handler.grow_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}

  executeShrink:
    handler: src.db_resize_handler.execute_shrink_machine
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      SHRINK_STATE_MACHINE_ARN: arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:aqts-ecosystem-switch-shrink-capture-db-${self:provider.stage}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}
    events:
      - cloudwatchEvent:
          event:
            source:
              - 'aws.cloudwatch'
            detail:
              alarmName: [ "aqts-capture-ecosystem-switch-${self:provider.stage}-low-cpu-alarm" ]

  executeGrow:
    handler: src.db_resize_handler.execute_grow_machine
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      GROW_STATE_MACHINE_ARN: arn:aws:states:${self:provider.region}:#{AWS::AccountId}:stateMachine:aqts-ecosystem-switch-grow-capture-db-${self:provider.stage}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}
    events:
      - cloudwatchEvent:
          event:
            source:
              - 'aws.cloudwatch'
            detail:
              alarmName: [ "aqts-capture-ecosystem-switch-${self:provider.stage}-high-cpu-alarm" ]

  restoreDbCluster:
    handler: src.db_create_handler.restore_db_cluster
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  modifyPostgres:
    handler: src.db_create_handler.modify_postgres_password
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  createDbInstance:
    handler: src.db_create_handler.create_db_instance
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  modifySchemaOwner:
    handler: src.db_create_handler.modify_schema_owner_password
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  deleteCaptureDb:
    handler: src.db_create_handler.delete_capture_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO


  # For observations db

  modifyObPostgres:
    handler: src.db_create_handler.modify_observation_postgres_password
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  modifyObPasswords:
    handler: src.db_create_handler.modify_observation_passwords
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  createObservationDb:
    handler: src.db_create_handler.create_observation_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  copyObDbSnapshot:
    handler: src.db_create_handler.copy_observation_db_snapshot
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      # If we are on the dev tier the snapshots need to be manually copied.  See README
      LAST_OB_DB_SNAPSHOT: ${self:custom.observationsDb.connectInfo.LAST_OB_DB_SNAPSHOT}
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  deleteObservationDb:
    handler: src.db_create_handler.delete_observation_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      CAN_DELETE_DB: ${self:custom.canDeleteDb.${self:provider.stage}}
      STAGE: ${self:provider.stage}
      LOG_LEVEL: INFO

  shrinkObsDb:
    handler: src.db_resize_handler.shrink_observations_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}
#    events:
#      - cloudwatchEvent:
#          event:
#            source:
#              - 'aws.cloudwatch'
#            detail:
#              alarmName: [ "aqts-capture-ecosystem-switch-${self:provider.stage}-obs-low-cpu-alarm" ]

  growObsDb:
    handler: src.db_resize_handler.grow_observations_db
    role:
      Fn::Sub:
        - arn:aws:iam::${accountId}:role/csr-Lambda-Role
        - accountId:
            Ref: AWS::AccountId
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}
#    events:
#      - cloudwatchEvent:
#          event:
#            source:
#              - 'aws.cloudwatch'
#            detail:
#              alarmName: [ "aqts-capture-ecosystem-switch-${self:provider.stage}-obs-high-cpu-alarm" ]


stepFunctions:
  stateMachines:
    aqtsCreateCaptureDb:
      #loggingConfig:
      #  level: ALL
      #  includeExecutionData: true
      #  destinations:
      #    - arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:step-functions-${self:custom.environments.${self:provider.stage}}:*
      role: arn:aws:iam::#{AWS::AccountId}:role/step-functions-service-access
      name: aqts-capture-ecosystem-switch-create-capture-db-${self:provider.stage}
      definition:
        Comment: "AQTS CreateCaptureDb"
        StartAt: RestoreDbCluster
        States:
          RestoreDbCluster:
            Type: Task
            Resource:
              Fn::GetAtt: [restoreDbCluster, Arn]
            Next: ModifyPostgres
          ModifyPostgres:
            Type: Task
            Resource:
              Fn::GetAtt: [modifyPostgres, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 600
                MaxAttempts: 12
                BackoffRate: 1
            Next: CreateDbInstance
          CreateDbInstance:
            Type: Task
            Resource:
              Fn::GetAtt: [createDbInstance, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 600
                MaxAttempts: 12
                BackoffRate: 1
            Next: ModifySchemaOwner
          ModifySchemaOwner:
            Type: Task
            Resource:
              Fn::GetAtt: [ modifySchemaOwner, Arn ]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 60
                MaxAttempts: 30
                BackoffRate: 1
            End: true

    aqtsShrinkCaptureDb:
      #loggingConfig:
      #  level: ALL
      #  includeExecutionData: true
      #  destinations:
      #    - arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:step-functions-${self:custom.environments.${self:provider.stage}}:*
      role: arn:aws:iam::#{AWS::AccountId}:role/step-functions-service-access
      name: aqts-ecosystem-switch-shrink-capture-db-${self:provider.stage}
      definition:
        Comment: "AQTS Shrink Db"
        StartAt: ShrinkDb
        States:
          ShrinkDb:
            Type: Task
            Resource:
              Fn::GetAtt: [shrinkDb, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 120
                MaxAttempts: 10
                BackoffRate: 1
            Next: EnableTrigger
          EnableTrigger:
            Type: Task
            Resource:
              Fn::GetAtt: [enableTrigger, Arn]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 120
                MaxAttempts: 10
                BackoffRate: 1
            End: true

    aqtsGrowCaptureDb:
      # loggingConfig:
      #  level: ALL
      #  includeExecutionData: true
      #  destinations:
      #    - arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:step-functions-${self:custom.environments.${self:provider.stage}}:*
      role: arn:aws:iam::#{AWS::AccountId}:role/step-functions-service-access
      name: aqts-ecosystem-switch-grow-capture-db-${self:provider.stage}
      definition:
        Comment: "AQTS Grow Db"
        StartAt: GrowDb
        States:
          GrowDb:
            Type: Task
            Resource:
              Fn::GetAtt: [ growDb, Arn ]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 120
                MaxAttempts: 10
                BackoffRate: 1
            Next: EnableTrigger
          EnableTrigger:
            Type: Task
            Resource:
              Fn::GetAtt: [ enableTrigger, Arn ]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 120
                MaxAttempts: 10
                BackoffRate: 1
            End: true

    aqtsCreateObDb:
      #loggingConfig:
      #  level: ALL
      #  includeExecutionData: true
      #  destinations:
      #    destinations:
      #      - arn:aws:logs:${self:provider.region}:#{AWS::AccountId}:log-group:step-functions-${self:custom.environments.${self:provider.stage}}:*
      role: arn:aws:iam::#{AWS::AccountId}:role/step-functions-service-access
      name: aqts-capture-ecosystem-switch-create-obs-db-${self:provider.stage}
      definition:
        Comment: "AQTS CreateObservationsDb"
        StartAt: CopyObsSnapshot
        States:
          CopyObsSnapshot:
            Type: Task
            Resource:
              Fn::GetAtt: [ copyObDbSnapshot, Arn ]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 300
                MaxAttempts: 24
                BackoffRate: 1
            Next: CreateObservationDb
          CreateObservationDb:
            Type: Task
            Resource:
              Fn::GetAtt: [ createObservationDb, Arn ]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 300
                MaxAttempts: 24
                BackoffRate: 1
            Next: ModifyObPostgres
          ModifyObPostgres:
            Type: Task
            Resource:
              Fn::GetAtt: [ modifyObPostgres, Arn ]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 300
                MaxAttempts: 24
                BackoffRate: 1
            Next: ModifyObPasswords
          ModifyObPasswords:
            Type: Task
            Resource:
              Fn::GetAtt: [ modifyObPasswords, Arn ]
            Retry:
              - ErrorEquals:
                  - States.ALL
                IntervalSeconds: 300
                MaxAttempts: 24
                BackoffRate: 1
            End: true

resources:
  Resources:
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}-${self:provider.stage}-topic
        TopicName: ${self:service}-${self:provider.stage}-topic
    concurrencyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-invocation-alarm
        AlarmDescription: Notify when the db control utilization lambda is invoked
        Namespace: 'AWS/Lambda'
        Dimensions:
          - Name: FunctionName
            Value:
              Ref: ControlDbUtilLambdaFunction
        MetricName: ConcurrentExecutions
        Statistic: Maximum
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Threshold: 1
        Period: 60
        EvaluationPeriods: 1
        AlarmActions:
          - Ref: snsTopic
    rdsHighCpuAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-high-cpu-alarm
        AlarmDescription: Notify when the nwcapture rds cpu goes over the threshold
        Namespace: 'AWS/RDS'
        Dimensions:
          - Name: DBInstanceIdentifier
            Value: nwcapture-${self:custom.environments.${self:provider.stage}}-instance1
        MetricName: CPUUtilization
        Statistic: Average
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Threshold: 50
        Period: 300
        Unit: Percent
        EvaluationPeriods: 2
        AlarmActions:
          - Ref: snsTopic
    rdsLowCpuAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-low-cpu-alarm
        AlarmDescription: Notify when the nwcapture rds cpu goes under the threshold
        Namespace: 'AWS/RDS'
        Dimensions:
          - Name: DBInstanceIdentifier
            Value: nwcapture-${self:custom.environments.${self:provider.stage}}-instance1
        MetricName: CPUUtilization
        Statistic: Average
        ComparisonOperator: LessThanOrEqualToThreshold
        Threshold: 10
        Period: 300
        Unit: Percent
        EvaluationPeriods: 6
        AlarmActions:
          - Ref: snsTopic
#    obsHighCpuAlarm:
#      Type: AWS::CloudWatch::Alarm
#      Properties:
#        AlarmName: ${self:service}-${self:provider.stage}-obs-high-cpu-alarm
#        AlarmDescription: Notify when the observations rds cpu goes over the threshold
#        Namespace: 'AWS/RDS'
#        Dimensions:
#          - Name: DBInstanceIdentifier
#            Value: observations-${self:custom.environments.${self:provider.stage}}
#        MetricName: CPUUtilization
#        Statistic: Average
#        ComparisonOperator: GreaterThanOrEqualToThreshold
#        Threshold: 50
#        Period: 300
#        Unit: Percent
#        EvaluationPeriods: 2
#        AlarmActions:
#          - Ref: snsTopic
#    obsLowCpuAlarm:
#      Type: AWS::CloudWatch::Alarm
#      Properties:
#        AlarmName: ${self:service}-${self:provider.stage}-obs-low-cpu-alarm
#        AlarmDescription: Notify when the observations rds cpu goes under the threshold
#        Namespace: 'AWS/RDS'
#        Dimensions:
#          - Name: DBInstanceIdentifier
#            Value: observations-${self:custom.environments.${self:provider.stage}}
#        MetricName: CPUUtilization
#        Statistic: Average
#        ComparisonOperator: LessThanOrEqualToThreshold
#        Threshold: 10
#        Period: 300
#        Unit: Percent
#        EvaluationPeriods: 6
#        AlarmActions:
#          - Ref: snsTopic


plugins:
  - serverless-plugin-git-variables
  - serverless-pseudo-parameters
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-es-logs

package:
  exclude:
    - node_modules/**
    - Dockerfile
    - .dockerignore
    - Jenkinsfile
    - package.json
    - package-lock.json

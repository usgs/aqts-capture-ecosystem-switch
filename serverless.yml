service: aqts-capture-ecosystem-switch

provider:
  name: aws
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'TEST'}
  runtime: python3.8
  memorySize: 128
  timeout: 30
  logRetentionInDays: 90
  deploymentBucket:
    name: iow-cloud-applications
  stackTags:
    "wma:applicationId": "Aquarius TS Capture Ecosystem Switch"
    "wma:contact": "Kenneth Kehl kkehl@contractor.usgs.gov"
    "wma:environment": ${self:provider.stage}
    "wma:taggingVersion": 0.0.1
    "wma:costCenter": TBD
    "wma:organization": IOW
    "displayName": "Eco-switch"
    commitIdentifier: ${git:sha1}

custom:
  # https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html#CronExpressions
  # The test database starts at 7 am central and stops at 6 pm central time, Monday through Friday.
  # The qa database stops at 6 pm central on Fridays
  # The production database never stops or starts according to a schedule, the lambdas exist only for manual use.
  startObservationSchedules:
    TEST: cron(0 12 ? * MON-FRI *)
    QA: cron(0 12 ? * MON *)
    PROD: cron(0 12 ? * MON *)
  stopObservationSchedules:
    TEST: cron(0 23 ? * MON-FRI *)
    QA: cron(0 23 ? * FRI *)
    PROD: cron(0 23 ? * FRI *)
  startCaptureSchedules:
    TEST: cron(0 12 ? * MON-FRI *)
    QA: cron(0 12 ? * MON *)
    PROD: cron(0 12 ? * MON *)
  stopCaptureSchedules:
    TEST: cron(0 23 ? * MON-FRI *)
    QA: cron(0 23 ? * FRI *)
    PROD: cron(0 23 ? * FRI *)
  # No scheduling enabled for prod.  For qa, only Friday stops are scheduled.  For test, both stop and
  # starts are scheduled.
  startScheduleEnabled:
    TEST: false
    QA: false
    PROD: false
  stopScheduleEnabled:
    TEST: false
    QA: true
    PROD: false

  exportGitVariables: false
  accountNumber: ${ssm:/iow/aws/accountNumber}
  vpc:
    securityGroupIds: ${ssm:/iow/retriever-capture/${self:provider.stage}/securityGroupIds~split}
    subnetIds: ${ssm:/iow/aws/vpc/${self:provider.stage}/subnetIds~split}
  observationsDb:
    connectInfo: ${ssm:/aws/reference/secretsmanager/WQP-EXTERNAL-${self:provider.stage}~true}

functions:
  StartObservationsDb:
    handler: src.handler.start_observations_db
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      MAX_RETRIES: 6
    events:
      - schedule:
          rate: ${self:custom.startObservationSchedules.${self:provider.stage}}
          enabled: ${self:custom.startScheduleEnabled.${self:provider.stage}}
    vpc: ${self:custom.vpc}

  StopObservationsDb:
    handler: src.handler.stop_observations_db
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      DB_HOST: ${self:custom.observationsDb.connectInfo.DATABASE_ADDRESS}
      DB_USER: ${self:custom.observationsDb.connectInfo.WQP_READ_ONLY_USERNAME}
      DB_NAME: ${self:custom.observationsDb.connectInfo.DATABASE_NAME}
      DB_PASSWORD: ${self:custom.observationsDb.connectInfo.WQP_READ_ONLY_PASSWORD}
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
    events:
      - schedule:
          rate: ${self:custom.stopObservationSchedules.${self:provider.stage}}
          enabled: ${self:custom.stopScheduleEnabled.${self:provider.stage}}
    vpc: ${self:custom.vpc}

  StartCaptureDb:
    handler: src.handler.start_capture_db
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      MAX_RETRIES: 6
    events:
      - schedule:
          rate: ${self:custom.startCaptureSchedules.${self:provider.stage}}
          enabled: ${self:custom.startScheduleEnabled.${self:provider.stage}}
    vpc: ${self:custom.vpc}

  StopCaptureDb:
    handler: src.handler.stop_capture_db
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      STAGE: ${self:provider.stage}
      MAX_RETRIES: 6
    events:
      - schedule:
          rate: ${self:custom.stopCaptureSchedules.${self:provider.stage}}
          enabled: ${self:custom.stopScheduleEnabled.${self:provider.stage}}
    vpc: ${self:custom.vpc}

  ControlDbUtilization:
    handler: src.handler.control_db_utilization
    role: arn:aws:iam::${self:custom.accountNumber}:role/csr-Lambda-Role
    environment:
      AWS_DEPLOYMENT_REGION: ${self:provider.region}
      LOG_LEVEL: INFO
      STAGE: ${self:provider.stage}
      MAX_RETRIES: 6
    events:
      - cloudwatchEvent:
          event:
            source:
              - 'aws.cloudwatch'
            detail:
              alarmName: ["aqts-capture-error-handler-${self:provider.stage}-error-alarm"]
    vpc: ${self:custom.vpc}

resources:
  Resources:
    snsTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:service}-${self:provider.stage}-topic
        TopicName: ${self:service}-${self:provider.stage}-topic
    concurrencyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${self:provider.stage}-invocation-alarm
        AlarmDescription: Notify when the db control utilization lambda is invoked
        Namespace: 'AWS/Lambda'
        Dimensions:
          - Name: FunctionName
            Value:
              Ref: ControlDbUtilizationLambdaFunction
        MetricName: ConcurrentExecutions
        Statistic: Maximum
        ComparisonOperator: GreaterThanOrEqualToThreshold
        Threshold: 1
        Period: 60
        EvaluationPeriods: 1
        AlarmActions:
          - Ref: snsTopic

plugins:
  - serverless-plugin-git-variables
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - Dockerfile
    - .dockerignore
    - Jenkinsfile
    - package.json
    - package-lock.json
